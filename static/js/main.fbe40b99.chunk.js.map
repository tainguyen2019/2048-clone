{"version":3,"sources":["game-logic/index.ts","components/cell/index.tsx","components/row/index.tsx","components/game/index.tsx","components/header/index.tsx","components/footer/index.tsx","components/game-overlay/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["bufferRowLabels","Array","from","keys","map","_","gameLabelsFunction","gameLabels","func","forEach","rowLabels","addRandomCell","availableCells","getAvailableCells","availableCellsLength","length","randomIndex","Math","floor","random","randomNumber","_availableCells$rando","row","col","result","rowIndex","cellLabel","columnIndex","push","gameLogic","shiftLeft","mergedGameLabels","filter","Boolean","concat","slice","i","Number","shiftRight","rotateRight","j","rotateLeft","shiftUp","shiftDown","addCell","preGameLabels","transformedGameLabels","JSON","stringify","initialGameLabels","hasNoMovesLeft","every","item","has2048","flat","some","Cell","_ref","label","_jsx","className","children","Row","labels","index","Game","status","setGameLabels","setStatus","updateStatus","gameLabelsInput","handleKeyDown","event","preventDefault","key","handlers","useSwipeable","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","useEffect","window","addEventListener","removeEventListener","includes","_objectSpread","Header","scrore","bestScore","newGame","_jsxs","onClick","Footer","GameOverlay","tryAgain","keepGoing","display","style","App","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","handleNewGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbe40b99.chunk.js","sourcesContent":["const boardSize = 4;\r\nconst bufferRowLabels: RowLabels = Array.from(Array(boardSize).keys()).map(\r\n  (_) => null\r\n);\r\n\r\nconst shiftLeft = (rowLabels: RowLabels) => {\r\n  const result = rowLabels\r\n    .filter(Boolean)\r\n    .concat(bufferRowLabels)\r\n    .slice(0, boardSize);\r\n\r\n  for (let i = 0; i < rowLabels.length - 1; i++) {\r\n    if (result[i] && result[i + 1] && result[i] === result[i + 1]) {\r\n      result[i] = Number(result[i]) * 2;\r\n      result[i + 1] = null;\r\n    }\r\n  }\r\n\r\n  return result.filter(Boolean).concat(bufferRowLabels).slice(0, boardSize);\r\n};\r\n\r\nconst shiftRight = (rowLabels: RowLabels) => {\r\n  let result: RowLabels = rowLabels.filter(Boolean);\r\n\r\n  for (let i = result.length - 1; i > 0; i--) {\r\n    if (result[i] && result[i - 1] && result[i] === result[i - 1]) {\r\n      result[i] = Number(result[i]) * 2;\r\n      result[i - 1] = null;\r\n    }\r\n  }\r\n\r\n  result = bufferRowLabels.concat(result.filter(Boolean));\r\n  result = result.slice(result.length - boardSize);\r\n  return result;\r\n};\r\n\r\nconst gameLabelsFunction = (gameLabels: GameLabels, func: GameFunc) => {\r\n  gameLabels.forEach((rowLabels) => func(rowLabels));\r\n};\r\n\r\nconst addRandomCell = (gameLabels: GameLabels) => {\r\n  const availableCells = getAvailableCells(gameLabels);\r\n  const availableCellsLength = availableCells.length;\r\n\r\n  if (!availableCellsLength) {\r\n    return gameLabels;\r\n  }\r\n\r\n  const randomIndex = Math.floor(Math.random() * availableCellsLength);\r\n  const randomNumber = Math.random() < 0.9 ? 2 : 4;\r\n  const { row, col } = availableCells[randomIndex];\r\n\r\n  gameLabels[row][col] = randomNumber;\r\n\r\n  return gameLabels;\r\n};\r\n\r\nconst getAvailableCells = (gameLabels: GameLabels) => {\r\n  const result: CellAvailable[] = [];\r\n\r\n  gameLabels.forEach((rowLabels, rowIndex) => {\r\n    rowLabels.forEach((cellLabel, columnIndex) => {\r\n      if (!cellLabel) {\r\n        result.push({ row: rowIndex, col: columnIndex });\r\n      }\r\n    });\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nconst gameLogic = {\r\n  shiftLeft: (gameLabels: GameLabels) => {\r\n    const mergedGameLabels: GameLabels = [];\r\n\r\n    gameLabelsFunction(gameLabels, (rowLabels: RowLabels) => {\r\n      mergedGameLabels.push(shiftLeft(rowLabels));\r\n    });\r\n\r\n    return mergedGameLabels;\r\n  },\r\n  shiftRight: (gameLabels: GameLabels) => {\r\n    const mergedGameLabels: GameLabels = [];\r\n\r\n    gameLabelsFunction(gameLabels, (rowLabels: RowLabels) => {\r\n      mergedGameLabels.push(shiftRight(rowLabels));\r\n    });\r\n\r\n    return mergedGameLabels;\r\n  },\r\n  rotateRight: (gameLabels: GameLabels) => {\r\n    const result: GameLabels = [];\r\n\r\n    for (let i = 0; i < gameLabels.length; i++) {\r\n      const rowLabels: RowLabels = [];\r\n      for (let j = gameLabels.length - 1; j >= 0; j--) {\r\n        rowLabels.push(gameLabels[j][i]);\r\n      }\r\n\r\n      result.push(rowLabels);\r\n    }\r\n\r\n    return result;\r\n  },\r\n  rotateLeft: (gameLabels: GameLabels) => {\r\n    const result: GameLabels = [];\r\n\r\n    for (let i = gameLabels.length - 1; i >= 0; i--) {\r\n      const rowLabels: RowLabels = [];\r\n      for (let j = 0; j < gameLabels.length; j++) {\r\n        rowLabels.push(gameLabels[j][i]);\r\n      }\r\n\r\n      result.push(rowLabels);\r\n    }\r\n\r\n    return result;\r\n  },\r\n  shiftUp: (gameLabels: GameLabels) => {\r\n    let result: GameLabels = [];\r\n\r\n    result = gameLogic.rotateLeft(gameLabels);\r\n    result = gameLogic.shiftLeft(result);\r\n    result = gameLogic.rotateRight(result);\r\n\r\n    return result;\r\n  },\r\n  shiftDown: (gameLabels: GameLabels) => {\r\n    let result: GameLabels = [];\r\n\r\n    result = gameLogic.rotateRight(gameLabels);\r\n    result = gameLogic.shiftLeft(result);\r\n    result = gameLogic.rotateLeft(result);\r\n\r\n    return result;\r\n  },\r\n  addCell: (preGameLabels: GameLabels, transformedGameLabels: GameLabels) => {\r\n    if (\r\n      JSON.stringify(preGameLabels) === JSON.stringify(transformedGameLabels)\r\n    ) {\r\n      return transformedGameLabels;\r\n    }\r\n\r\n    return addRandomCell(transformedGameLabels);\r\n  },\r\n  getAvailableCells: (gameLabels: GameLabels) => {\r\n    return getAvailableCells(gameLabels);\r\n  },\r\n  initialGameLabels: () => {\r\n    let gameLabels: GameLabels = [\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n      [null, null, null, null],\r\n    ];\r\n\r\n    gameLabels = addRandomCell(gameLabels);\r\n    gameLabels = addRandomCell(gameLabels);\r\n\r\n    return gameLabels;\r\n  },\r\n  hasNoMovesLeft: (gameLabels: GameLabels) => {\r\n    let result = [];\r\n\r\n    result.push(\r\n      JSON.stringify(gameLogic.shiftUp(gameLabels)) ===\r\n        JSON.stringify(gameLabels)\r\n    );\r\n    result.push(\r\n      JSON.stringify(gameLogic.shiftLeft(gameLabels)) ===\r\n        JSON.stringify(gameLabels)\r\n    );\r\n    result.push(\r\n      JSON.stringify(gameLogic.shiftDown(gameLabels)) ===\r\n        JSON.stringify(gameLabels)\r\n    );\r\n    result.push(\r\n      JSON.stringify(gameLogic.shiftRight(gameLabels)) ===\r\n        JSON.stringify(gameLabels)\r\n    );\r\n\r\n    return result.every((item) => item === true);\r\n  },\r\n  has2048: (gameLabels: GameLabels) =>\r\n    gameLabels.flat().some((cellLabel) => Number(cellLabel) === 2048),\r\n};\r\n\r\nexport default gameLogic;\r\n","import './styles.css';\r\n\r\ntype CellProps = {\r\n  label: CellLabel;\r\n};\r\n\r\nconst Cell: React.FC<CellProps> = ({ label }) => {\r\n  return <div className={`cell ${label && 'cell-' + label}`}>{label}</div>;\r\n};\r\n\r\nexport default Cell;\r\n","import Cell from '../cell';\r\nimport './styles.css';\r\n\r\ntype RowProps = {\r\n  labels: RowLabels;\r\n};\r\n\r\nconst Row: React.FC<RowProps> = ({ labels }) => {\r\n  return (\r\n    <div className=\"row\">\r\n      {labels.map((label, index) => (\r\n        <Cell label={label} key={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import { useEffect } from 'react';\r\nimport { useSwipeable } from 'react-swipeable';\r\nimport gameLogic from '../../game-logic';\r\nimport Row from '../row';\r\nimport './styles.css';\r\n\r\ntype GameProps = {\r\n  gameLabels: GameLabels;\r\n  status: string;\r\n  setGameLabels: React.Dispatch<React.SetStateAction<GameLabels>>;\r\n  setStatus: React.Dispatch<React.SetStateAction<string>>;\r\n};\r\n\r\nconst Game: React.FC<GameProps> = ({\r\n  gameLabels,\r\n  status,\r\n  setGameLabels,\r\n  setStatus,\r\n}) => {\r\n  const updateStatus = (gameLabelsInput: GameLabels) => {\r\n    if (gameLogic.hasNoMovesLeft(gameLabelsInput)) {\r\n      setStatus('over');\r\n    }\r\n\r\n    if (gameLogic.has2048(gameLabelsInput) && status !== 'continue') {\r\n      setStatus('won');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: KeyboardEvent) => {\r\n    event.preventDefault();\r\n    let result: GameLabels = [];\r\n\r\n    switch (event.key) {\r\n      case 'ArrowUp': {\r\n        result = gameLogic.addCell(gameLabels, gameLogic.shiftUp(gameLabels));\r\n        setGameLabels(result);\r\n        break;\r\n      }\r\n      case 'ArrowRight': {\r\n        result = gameLogic.addCell(\r\n          gameLabels,\r\n          gameLogic.shiftRight(gameLabels)\r\n        );\r\n        setGameLabels(result);\r\n        break;\r\n      }\r\n      case 'ArrowDown': {\r\n        result = gameLogic.addCell(gameLabels, gameLogic.shiftDown(gameLabels));\r\n        setGameLabels(result);\r\n        break;\r\n      }\r\n      case 'ArrowLeft': {\r\n        result = gameLogic.addCell(gameLabels, gameLogic.shiftLeft(gameLabels));\r\n        setGameLabels(result);\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n    updateStatus(result);\r\n  };\r\n\r\n  const handlers = useSwipeable({\r\n    onSwipedLeft: () => {\r\n      let result: GameLabels = [];\r\n      result = gameLogic.addCell(gameLabels, gameLogic.shiftLeft(gameLabels));\r\n      setGameLabels(result);\r\n      updateStatus(result);\r\n    },\r\n    onSwipedRight: () => {\r\n      let result: GameLabels = [];\r\n      result = gameLogic.addCell(gameLabels, gameLogic.shiftRight(gameLabels));\r\n      setGameLabels(result);\r\n      updateStatus(result);\r\n    },\r\n    onSwipedUp: () => {\r\n      let result: GameLabels = [];\r\n      result = gameLogic.addCell(gameLabels, gameLogic.shiftUp(gameLabels));\r\n      setGameLabels(result);\r\n      updateStatus(result);\r\n    },\r\n    onSwipedDown: () => {\r\n      let result: GameLabels = [];\r\n      result = gameLogic.addCell(gameLabels, gameLogic.shiftDown(gameLabels));\r\n      setGameLabels(result);\r\n      updateStatus(result);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!['continue', 'running'].includes(status)) {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [status]);\r\n\r\n  return (\r\n    <div className=\"game-container\" {...handlers}>\r\n      {gameLabels.map((labels, index) => (\r\n        <Row labels={labels} key={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import './styles.css';\r\n\r\ntype HeaderProps = {\r\n  scrore: number;\r\n  bestScore: number;\r\n  newGame: VoidFunction;\r\n};\r\n\r\nconst Header: React.FC<HeaderProps> = ({ scrore, bestScore, newGame }) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-row\">\r\n        <div className=\"title\">2048</div>\r\n        <div className=\"score\">\r\n          <div className=\"score-label\">SCORE</div>\r\n          <div className=\"score-value\">{scrore}</div>\r\n        </div>\r\n        <div className=\"score\">\r\n          <div className=\"score-label\">BEST SCORE</div>\r\n          <div className=\"score-value\">{bestScore}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"new-game\">\r\n        <div className=\"intro\">Join the numbers and get to the 2048 tile!</div>\r\n        <button onClick={newGame}>New Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import './styles.css';\r\n\r\nconst Footer: React.FC = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <b>\r\n        <u>HOW TO PLAY</u>\r\n      </b>\r\n      : Use your arrow keys to move the tiles. When two tiles with the same\r\n      number touch, they merge into one!\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import './styles.css';\r\n\r\ntype GameOverlayProps = {\r\n  status: string;\r\n  setStatus: React.Dispatch<React.SetStateAction<string>>;\r\n  tryAgain: VoidFunction;\r\n  keepGoing: VoidFunction;\r\n};\r\n\r\nconst GameOverlay: React.FC<GameOverlayProps> = ({\r\n  status,\r\n  setStatus,\r\n  tryAgain,\r\n  keepGoing,\r\n}) => {\r\n  const display = ['running', 'continue'].includes(status) ? 'none' : 'flex';\r\n\r\n  return (\r\n    <div className=\"game-overlay\" style={{ display }}>\r\n      {status === 'over' && (\r\n        <div className=\"overlay-box\">\r\n          <div className=\"message\">Game Over!</div>\r\n          <button onClick={tryAgain}>Try Again</button>\r\n        </div>\r\n      )}\r\n      {status === 'won' && (\r\n        <div className=\"overlay-box\">\r\n          <div className=\"message\">You win!</div>\r\n          <div className=\"row-button\">\r\n            <button onClick={tryAgain}>Try Again</button>\r\n            <button onClick={keepGoing}>Keep going</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOverlay;\r\n","import React, { useState } from 'react';\nimport Game from './components/game';\nimport Header from './components/header';\nimport Footer from './components/footer';\nimport gameLogic from './game-logic';\nimport GameOverlay from './components/game-overlay';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [gameLabels, setGameLabels] = useState(gameLogic.initialGameLabels());\n  const [status, setStatus] = useState('running');\n\n  const handleNewGame = () => {\n    setGameLabels(gameLogic.initialGameLabels());\n  };\n\n  const handleTryAgain = () => {\n    setStatus('running');\n    handleNewGame();\n  };\n\n  const handleKeepGoing = () => {\n    setStatus('continue');\n  };\n\n  return (\n    <div className=\"app-container\">\n      <Header scrore={0} bestScore={0} newGame={handleNewGame} />\n      <GameOverlay\n        status={status}\n        setStatus={setStatus}\n        tryAgain={handleTryAgain}\n        keepGoing={handleKeepGoing}\n      />\n      <Game\n        gameLabels={gameLabels}\n        status={status}\n        setGameLabels={setGameLabels}\n        setStatus={setStatus}\n      />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}